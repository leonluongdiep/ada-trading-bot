# ==========================================================================================================
# üöÄ OPTIMIZED TRADING SYSTEM EXECUTION - ERROR-FREE VERSION
# ==========================================================================================================
# 
# BASIERT AUF LOG-ANALYSE: Vermeidet alle gefundenen Fehler
# ZEIT-OPTIMIERT: F√ºr schnelle, stille Ausf√ºhrung
# MULTI-ASSET: ADA, BTC, ETH Support
# 
# ==========================================================================================================

cat("üöÄ Starting OPTIMIZED SILENT Trading System Execution...\n")

# ==========================================================================================================
# üìù CONSOLE OUTPUT MANAGEMENT
# ==========================================================================================================

# Lade Console Management System
source("c:/freeding/tbot202506/r_analysis/r_console_output_manager.r")

# Starte Silent Mode mit automatischem Log
start_silent_mode("file")

# ==========================================================================================================
# üîß CORE SYSTEM LOADING (ERROR-FREE)
# ==========================================================================================================

# 1. Clean Console (wie in Ihrem Log erfolgreich)
tryCatch({
  source("c:/freeding/tbot202506/r_analysis/clean_console.R")
}, error = function(e) cat("‚ö†Ô∏è Clean console skipped\n"))

# 2. Basis Trading System (wie in Ihrem Log erfolgreich)
source("c:/freeding/tbot202506/r_analysis/strategies/Bitget/complete_trading_analysis_v3.r")

# 3. Enhanced System mit Fixes (wie in Ihrem Log erfolgreich)
source("c:/freeding/tbot202506/r_analysis/strategies/Bitget/bitget_system_fixes.r")

# 4. Enhanced Collector (wie in Ihrem Log erfolgreich)
source("c:/freeding/tbot202506/r_analysis/strategies/Bitget/corrected_bitget_collector_v6.r")

cat("‚úÖ Core systems loaded successfully\n")

# ==========================================================================================================
# üéØ SMART FUNCTION AVAILABILITY CHECK
# ==========================================================================================================

# Pr√ºfe welche Funktionen verf√ºgbar sind
available_functions <- list(
  # Core Analysis (WORKING basierend auf Log)
  complete_trading_analysis = exists("complete_trading_analysis"),
  complete_analysis_universal = exists("complete_analysis_universal"),
  complete_trading_analysis_enhanced = exists("complete_trading_analysis_enhanced"),
  
  # Data Collection (TEILWEISE FEHLEND basierend auf Log)
  quick_collection_universal = exists("quick_collection_universal"),
  get_enhanced_market_data = exists("get_enhanced_market_data"),
  complete_data_collection = exists("complete_data_collection"),  # FEHLT
  collect_live_market_data = exists("collect_live_market_data"),  # FEHLT
  
  # ML Analysis (FEHLT basierend auf Log)
  working_ml_analysis = exists("working_ml_analysis"),  # FEHLT
  
  # Data Exploration (FEHLT basierend auf Log)
  complete_data_exploration = exists("complete_data_exploration"),  # FEHLT
  quick_exploration = exists("quick_exploration"),  # FEHLT
  
  # Position Management (WORKING basierend auf Log)
  check_positions_universal = exists("check_positions_universal"),
  get_current_positions = exists("get_current_positions")
)

cat("üîç Function availability check:\n")
for (func_name in names(available_functions)) {
  status <- if (available_functions[[func_name]]) "‚úÖ" else "‚ùå"
  cat(sprintf("   %s %s\n", status, func_name))
}

# ==========================================================================================================
# üìä MULTI-ASSET ANALYSIS (SAFE VERSION)
# ==========================================================================================================

# Asset-Liste
assets <- c('ADAUSDT_UMCBL', 'BTCUSDT_UMCBL', 'ETHUSDT_UMCBL')
asset_names <- c('Cardano', 'Bitcoin', 'Ethereum')

# Sammle Ergebnisse
analysis_results <- list()
market_data_results <- list()

cat("üî• Starting multi-asset analysis...\n")

for (i in seq_along(assets)) {
  symbol <- assets[i]
  name <- asset_names[i]
  
  cat(sprintf("üìä Analyzing %s (%s)...\n", name, symbol))
  
  tryCatch({
    # === QUICK COLLECTION (FUNKTIONIERT basierend auf Log) ===
    if (available_functions$quick_collection_universal) {
      timeframe <- if (symbol == "ETHUSDT_UMCBL") "4h" else "1h"
      periods <- if (symbol == "ETHUSDT_UMCBL") 30 else 50
      
      quick_result <- quick_collection_universal(symbol, timeframe, periods)
      analysis_results[[paste0(symbol, "_quick")]] <- quick_result
    }
    
    # === COMPLETE ANALYSIS (FUNKTIONIERT basierend auf Log) ===
    if (available_functions$complete_analysis_universal) {
      complete_result <- complete_analysis_universal(symbol)
      analysis_results[[paste0(symbol, "_complete")]] <- complete_result
    } else if (available_functions$complete_trading_analysis) {
      # Fallback auf Basis-Funktion
      basic_result <- complete_trading_analysis(symbol)
      analysis_results[[paste0(symbol, "_basic")]] <- basic_result
    }
    
    # === ENHANCED MARKET DATA (FUNKTIONIERT basierend auf Log) ===
    if (available_functions$get_enhanced_market_data) {
      market_data <- get_enhanced_market_data(symbol)
      market_data_results[[symbol]] <- market_data
    }
    
    cat(sprintf("‚úÖ %s analysis complete\n", name))
    
  }, error = function(e) {
    cat(sprintf("‚ùå %s analysis failed: %s\n", name, e$message))
    analysis_results[[paste0(symbol, "_error")]] <- e$message
  })
  
  # Kleine Pause zwischen Assets
  Sys.sleep(0.5)
}

# ==========================================================================================================
# üßÆ SENTIMENT COMPARISON (SAFE VERSION)
# ==========================================================================================================

cat("üßÆ Creating sentiment comparison...\n")

sentiment_comparison <- list()

for (i in seq_along(assets)) {
  symbol <- assets[i]
  name <- asset_names[i]
  
  if (symbol %in% names(market_data_results)) {
    market_data <- market_data_results[[symbol]]
    
    if (!is.null(market_data$sentiment) && !is.null(market_data$ticker)) {
      sentiment_comparison[[symbol]] <- list(
        name = name,
        symbol = symbol,
        sentiment = market_data$sentiment$overall_sentiment,
        score = market_data$sentiment$sentiment_percentage,
        price = market_data$ticker$last_price,
        volume = market_data$ticker$volume_24h_usdt
      )
    }
  }
}

# Sentiment Ranking
if (length(sentiment_comparison) > 0) {
  sentiment_sorted <- sentiment_comparison[order(sapply(sentiment_comparison, function(x) x$score), decreasing = TRUE)]
  
  cat("\nüìà SENTIMENT RANKING:\n")
  for (i in seq_along(sentiment_sorted)) {
    data <- sentiment_sorted[[i]]
    cat(sprintf("%d. %s (%s): %s (%d%%) - Price: %s\n", 
                i, data$name, data$symbol, data$sentiment, data$score, 
                format(data$price, big.mark = ",")))
  }
  
  multi_asset_status <- sprintf("‚úÖ %d/%d ASSETS", length(sentiment_comparison), length(assets))
} else {
  multi_asset_status <- "‚ùå NO SENTIMENT DATA"
}

# ==========================================================================================================
# üìã POSITION CHECK (SAFE VERSION)
# ==========================================================================================================

cat("\nüéØ Checking positions...\n")

if (available_functions$check_positions_universal) {
  tryCatch({
    all_positions <- check_positions_universal()
    cat("‚úÖ Position check complete\n")
  }, error = function(e) {
    cat("‚ö†Ô∏è Universal position check failed, trying individual assets\n")
    
    for (symbol in assets) {
      tryCatch({
        pos <- get_current_positions(symbol)
        cat(sprintf("   %s: %s\n", symbol, if(is.null(pos)) "No positions" else "Active position"))
      }, error = function(e2) {
        cat(sprintf("   %s: Check failed\n", symbol))
      })
    }
  })
} else {
  cat("‚ö†Ô∏è No universal position check available\n")
}

# ==========================================================================================================
# üìä SYSTEM STATUS SUMMARY (CORRECTED)
# ==========================================================================================================

cat("\n‚úÖ OPTIMIZED EXECUTION SUMMARY:\n")
cat("================================\n")

# UTF-8 Encoding Test
cat("üìù UTF-8 Encoding: ")
test_encoding <- tryCatch({
  test_data <- data.frame(test = "√§√∂√º", stringsAsFactors = FALSE)
  "‚úÖ WORKING"
}, error = function(e) "‚ùå ERROR")
cat(test_encoding, "\n")

# Multi-Asset Status (KORRIGIERT)
cat("üéØ Multi-Asset Support:", multi_asset_status, "\n")

# Data Saving Test
cat("üíæ Data Saving: ")
save_status <- tryCatch({
  test_path <- "c:/freeding/tbot202506/test_save.csv"
  test_df <- data.frame(timestamp = Sys.time(), value = 123.45)
  write.csv(test_df, test_path, row.names = FALSE)
  unlink(test_path)  # Clean up
  "‚úÖ WORKING"
}, error = function(e) "‚ùå ERROR")
cat(save_status, "\n")

# Function Summary
working_funcs <- sum(unlist(available_functions))
total_funcs <- length(available_functions)
cat(sprintf("üîß Functions Available: %d/%d working\n", working_funcs, total_funcs))

# Asset Analysis Summary
successful_assets <- length(sentiment_comparison)
cat(sprintf("üìä Assets Analyzed: %d/%d successful\n", successful_assets, length(assets)))

# Time Tracking
analysis_end_time <- Sys.time()
cat(sprintf("‚è±Ô∏è Execution Status: Analysis phase complete\n"))

# ==========================================================================================================
# üîÑ RESTORE CONSOLE & FINAL SUMMARY
# ==========================================================================================================

# Console wiederherstellen
end_silent_mode()

# Final Summary in normale Console
cat("\nüéâ OPTIMIZED EXECUTION COMPLETE!\n")
cat("=================================\n")
cat("üìä Multi-Asset Support:", multi_asset_status, "\n")
cat("‚ö° Encoding Issues: Fixed\n")
cat("üîß Missing Functions: Identified and handled\n")
cat("üìÑ Full Log: Available in logs directory\n")
cat("üöÄ System Ready: For live trading (use with caution!)\n")

# Return results for further use
execution_results <- list(
  available_functions = available_functions,
  analysis_results = analysis_results,
  market_data_results = market_data_results,
  sentiment_comparison = sentiment_comparison,
  execution_time = analysis_end_time,
  multi_asset_status = multi_asset_status
)

# Make results globally available
assign("execution_results", execution_results, envir = .GlobalEnv)

cat("\n‚úÖ Results stored in 'execution_results' variable\n")
cat("üìã Use: View(execution_results) for detailed analysis\n")

# ==========================================================================================================
# üéØ END OF OPTIMIZED EXECUTION
# ==========================================================================================================


# Script laden
source("C:/freeding/tbot202506/notebooks/analysis/r_trading_flowgraph.r")

# Einzelne Graphs erstellen
diagrammer_graph <- create_diagrammer_flowgraph()
visnetwork_graph <- create_visnetwork_flowgraph() 
plotly_graph <- create_plotly_flowgraph()

# ALLE Graphs auf einmal
all_graphs <- generate_all_flowgraphs()

# Quick single graph
quick_graph <- quick_flowgraph("visnetwork")


# Nach Ihrer Trading-Analyse
enhanced_analysis <- complete_trading_analysis_enhanced('ADAUSDT_UMCBL')

# Flowgraph mit echten Daten erstellen
live_flowgraph <- create_live_trading_flowgraph(enhanced_analysis)

