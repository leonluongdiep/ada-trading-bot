# Fallback to synthetic data
return(generate_synthetic_mvrv(symbol))
}
#' Get Stablecoin Ratio
get_stablecoin_ratio <- function() {
cat("\n💵 Analyzing Stablecoin Dominance...\n")
# This would typically fetch from CoinGecko or similar
# Simulated for now
stablecoin_mcap <- 150000000000  # $150B
total_mcap <- 1200000000000  # $1.2T
ratio <- stablecoin_mcap / total_mcap
signal <- if (ratio > 0.15) "BEARISH"  # High stable ratio = fear
else if (ratio < 0.08) "BULLISH"  # Low stable ratio = risk-on
else "NEUTRAL"
cat("  Stablecoin Ratio:", round(ratio * 100, 2), "%", "-", signal, "\n")
return(list(
ratio = ratio,
signal = signal,
timestamp = Sys.time()
))
}
#' Get Active Addresses
get_active_addresses <- function(symbol = "BTC") {
cat("\n👥 Checking Active Addresses for", symbol, "...\n")
# Simulated data
active <- runif(1, min = 500000, max = 1200000)
avg_30d <- 800000
change_pct <- (active - avg_30d) / avg_30d * 100
signal <- if (change_pct > 20) "BULLISH"
else if (change_pct < -20) "BEARISH"
else "NEUTRAL"
cat("  Active Addresses:", round(active), "(", sprintf("%+.1f%%", change_pct), ")\n")
cat("  Signal:", signal, "\n")
return(list(
current = active,
avg_30d = avg_30d,
change_pct = change_pct,
signal = signal,
timestamp = Sys.time()
))
}
#' Get Whale Movements
get_whale_movements <- function(symbol = "BTC") {
cat("\n🐋 Tracking Whale Movements for", symbol, "...\n")
# Whale threshold
threshold <- if (symbol == "BTC") {
ONCHAIN_CONFIG$thresholds$whale_movements$whale_threshold_btc
} else {
ONCHAIN_CONFIG$thresholds$whale_movements$whale_threshold_eth
}
# This would query whale-alert API or similar
# Simulated data for now
movements <- list(
large_transactions = list(
list(
amount = 500,
from = "Unknown Wallet",
to = "Binance",
type = "EXCHANGE_INFLOW",
timestamp = Sys.time() - 2*60*60
),
list(
amount = 1200,
from = "Coinbase",
to = "Unknown Wallet",
type = "EXCHANGE_OUTFLOW",
timestamp = Sys.time() - 5*60*60
)
),
summary = list(
total_inflow = 800,
total_outflow = 2000,
net_flow = -1200,
signal = "BULLISH"  # Net outflow = bullish
)
)
display_whale_movements(movements, symbol)
return(movements)
}
# ==========================================================================================================
# 🎯 COMPOSITE ON-CHAIN SCORE
# ==========================================================================================================
#' Calculate Composite On-Chain Score
calculate_onchain_score <- function(symbols = c("BTC", "ETH")) {
cat("\n🔗 === COMPREHENSIVE ON-CHAIN ANALYSIS === 🔗\n")
cat("Analyzing:", paste(symbols, collapse = ", "), "\n")
cat(paste(rep("═", 50), collapse=""), "\n")
scores <- list()
for (symbol in symbols) {
cat("\n📊 Analyzing", symbol, "...\n")
# Gather all metrics
netflow <- get_exchange_netflow(symbol)
mvrv <- get_mvrv_ratio(symbol)
active <- get_active_addresses(symbol)
whales <- get_whale_movements(symbol)
}
# Get market-wide metrics
fear_greed <- get_fear_greed_index()
stablecoins <- get_stablecoin_ratio()
# Calculate composite score
composite <- list(
timestamp = Sys.time(),
# Individual scores (0-1 scale)
scores = list(
netflow = if (!is.null(netflow)) netflow$strength else 0.5,
fear_greed = if (!is.null(fear_greed)) (100 - fear_greed$current_value) / 100 else 0.5,
mvrv = if (!is.null(mvrv)) classify_mvrv_score(mvrv$mvrv) else 0.5,
stablecoins = if (stablecoins$signal == "BULLISH") 0.7 else 0.3,
whales = if (!is.null(whales) && whales$summary$signal == "BULLISH") 0.7 else 0.3
),
# Weighted average
overall_score = NA,
recommendation = NA
)
# Calculate weighted score
weights <- c(0.25, 0.20, 0.20, 0.15, 0.20)
composite$overall_score <- sum(unlist(composite$scores) * weights)
# Generate recommendation
composite$recommendation <- if (composite$overall_score > 0.7) "STRONG_BUY"
else if (composite$overall_score > 0.6) "BUY"
else if (composite$overall_score < 0.3) "STRONG_SELL"
else if (composite$overall_score < 0.4) "SELL"
else "HOLD"
# Display results
cat("\n📈 === ON-CHAIN COMPOSITE SCORE === 📈\n")
cat("Overall Score:", round(composite$overall_score, 2), "/1.00\n")
cat("Recommendation:", composite$recommendation, "\n")
cat("\nComponent Scores:\n")
for (name in names(composite$scores)) {
cat("  •", name, ":", round(composite$scores[[name]], 2), "\n")
}
return(composite)
}
# ==========================================================================================================
# 🚀 INTEGRATION WITH YOUR SYSTEM
# ==========================================================================================================
#' Quick On-Chain Check
quick_onchain_check <- function() {
cat("\n⚡ === QUICK ON-CHAIN CHECK === ⚡\n")
# Get key metrics
fear_greed <- get_fear_greed_index()
btc_netflow <- get_exchange_netflow("BTC")
# Quick summary
cat("\n📊 SUMMARY:\n")
if (!is.null(fear_greed)) {
cat("• Fear & Greed:", fear_greed$current_value, "-", fear_greed$signal, "\n")
}
if (!is.null(btc_netflow)) {
cat("• BTC Netflow:", btc_netflow$signal, "\n")
}
cat("\nRun full_onchain_analysis() for complete report\n")
}
#' Full On-Chain Analysis
full_onchain_analysis <- function() {
calculate_onchain_score(c("BTC", "ETH"))
}
#' Daily On-Chain Report
daily_onchain_report <- function() {
cat("\n📅 === DAILY ON-CHAIN REPORT === 📅\n")
cat("Date:", format(Sys.Date(), "%Y-%m-%d"), "\n")
# Full analysis
analysis <- calculate_onchain_score(c("BTC", "ETH"))
# Save to file
report_file <- paste0(
"C:/freeding/tbot202506/reports/onchain_",
format(Sys.Date(), "%Y%m%d"),
".rds"
)
saveRDS(analysis, report_file)
cat("\n💾 Report saved to:", report_file, "\n")
return(analysis)
}
# ==========================================================================================================
# 🎯 TRADING SIGNAL INTEGRATION
# ==========================================================================================================
#' Generate On-Chain Trading Signal
generate_onchain_trading_signal <- function(symbol = "BTCUSDT_UMCBL") {
# Get base symbol (remove trading pair suffix)
base_symbol <- if (grepl("BTC", symbol)) "BTC"
else if (grepl("ETH", symbol)) "ETH"
else return(NULL)
cat("\n🎯 Generating on-chain signal for", symbol, "\n")
# Get on-chain metrics
netflow <- get_exchange_netflow(base_symbol)
fear_greed <- get_fear_greed_index()
# Combine with your existing signals
signal_strength <- 0.5
if (!is.null(netflow)) {
signal_strength <- signal_strength * 0.6 + netflow$strength * 0.4
}
if (!is.null(fear_greed)) {
# Contrarian on extremes
if (fear_greed$current_value < 20) {
signal_strength <- min(signal_strength + 0.2, 1)
} else if (fear_greed$current_value > 80) {
signal_strength <- max(signal_strength - 0.2, 0)
}
}
# Generate trading recommendation
recommendation <- if (signal_strength > 0.7) "STRONG_BUY"
else if (signal_strength > 0.6) "BUY"
else if (signal_strength < 0.3) "STRONG_SELL"
else if (signal_strength < 0.4) "SELL"
else "HOLD"
result <- list(
symbol = symbol,
onchain_signal = recommendation,
signal_strength = signal_strength,
components = list(
netflow = netflow$signal,
fear_greed = fear_greed$signal
),
timestamp = Sys.time()
)
cat("  → On-Chain Signal:", recommendation,
"(Strength:", round(signal_strength, 2), ")\n")
return(result)
}
# ==========================================================================================================
# 🚀 INITIALIZATION
# ==========================================================================================================
# Create module interface
ONCHAIN_METRICS <- list(
# Core functions
netflow = get_exchange_netflow,
fear_greed = get_fear_greed_index,
mvrv = get_mvrv_ratio,
stablecoins = get_stablecoin_ratio,
whales = get_whale_movements,
active_addresses = get_active_addresses,
# Analysis
composite_score = calculate_onchain_score,
trading_signal = generate_onchain_trading_signal,
# Reports
quick_check = quick_onchain_check,
full_analysis = full_onchain_analysis,
daily_report = daily_onchain_report,
# Config
config = ONCHAIN_CONFIG
)
cat("✅ ON-CHAIN METRICS MODULE loaded successfully!\n")
cat("🔗 Available functions:\n")
cat("   • quick_onchain_check()      - Quick market overview\n")
cat("   • full_onchain_analysis()    - Complete analysis\n")
cat("   • get_fear_greed_index()     - Fear & Greed Index\n")
cat("   • get_exchange_netflow()     - Exchange flows\n")
cat("   • generate_onchain_trading_signal('BTCUSDT_UMCBL')\n")
cat("\n💡 Add API keys to environment for full functionality:\n")
cat("   GLASSNODE_API_KEY, CRYPTOQUANT_API_KEY\n")
cat("\n")
# NEU - Entkommentieren und Pfad anpassen:
source("C:/freeding/tbot202506/onchain_metrics_module.r")
# Jetzt die enhanced-Datei laden
source("onchain_metrics_enhanced.R")
# Quick Check
ONCHAIN_METRICS$quick_check()
# Fear & Greed Index abrufen
fear_greed <- get_fear_greed_index()
# Exchange Netflow prüfen
btc_netflow <- get_exchange_netflow("BTC")
# Oder mit dem Enhanced-Modul (falls geladen):
ONCHAIN_METRICS_V2$strategy('BTCUSDT_UMCBL', dry_run = TRUE)
# ---- clear_workspace.R ----
clear_workspace <- function(keep = character()) {
## Alle Objekte in .GlobalEnv holen (inkl. versteckte wie .Random.seed):
alles <- ls(envir = .GlobalEnv, all.names = TRUE)
## Gewünschte Objekte davon ausnehmen:
to_remove <- setdiff(alles, keep)
## Löschen:
rm(list = to_remove, envir = .GlobalEnv)
## Speicher freigeben (optional):
invisible(gc())
}
# Alles löschen
clear_workspace()
# Alles löschen, außer „model“ und „config“
#clear_workspace(keep = c("model", "config"))
# Setze das Arbeitsverzeichnis
setwd("C:/freeding/tbot202506/r_analysis/strategies/Bitget/")
# NEU - Entkommentieren und Pfad anpassen:
source("C:/freeding/tbot202506/onchain_metrics_module.r")
# Jetzt die enhanced-Datei laden
source("onchain_metrics_enhanced.R")
# Quick Check
ONCHAIN_METRICS$quick_check()
# Fear & Greed Index abrufen
fear_greed <- get_fear_greed_index()
# Exchange Netflow prüfen
btc_netflow <- get_exchange_netflow("BTC")
# Oder mit dem Enhanced-Modul (falls geladen):
ONCHAIN_METRICS_V2$strategy('BTCUSDT_UMCBL', dry_run = TRUE)
# ---- clear_workspace.R ----
clear_workspace <- function(keep = character()) {
## Alle Objekte in .GlobalEnv holen (inkl. versteckte wie .Random.seed):
alles <- ls(envir = .GlobalEnv, all.names = TRUE)
## Gewünschte Objekte davon ausnehmen:
to_remove <- setdiff(alles, keep)
## Löschen:
rm(list = to_remove, envir = .GlobalEnv)
## Speicher freigeben (optional):
invisible(gc())
}
# Alles löschen
clear_workspace()
# Alles löschen, außer „model“ und „config“
#clear_workspace(keep = c("model", "config"))
# Arbeitsverzeichnis setzen
setwd("C:/freeding/tbot202506/r_analysis/strategies/Bitget/")
# Basis-Modul laden
source("onchain_metrics_module.r")
# hub System neu laden
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/trading_execution_hub_v2_with_console_mgmt.r")
#summary function
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/improved_summary_functions.r")
# 5coins
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fix_coin_names_api.r")
#order management
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/advanced_order_management.r")
#bitget_api
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/bitget_api_fixes.r")
#complete_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/complete_system_fix.r")
#summary_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fixed_summary_system.r")
#summary_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/multi_asset_fix_complete.r")
# Source the base module first
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/onchain_metrics_enhanced.r")
force_portfolio_update()
# Alle Positionen schützen
protect_position("ETCUSDT_UMCBL")    # 41 USDT Gewinn sichern
protect_position("ALGOUSDT_UMCBL")   # 5.96 USDT Gewinn sichern
protect_position("ADAUSDT_UMCBL")    # 6.16 USDT Gewinn sichern
protect_position("VETUSDT_UMCBL")    # 5.48 USDT Gewinn sichern
protect_position("ICPUSDT_UMCBL")    # 12.40 USDT Gewinn sichern
protect_position("BTCUSDT_UMCBL")    # 12.40 USDT Gewinn sichern
protect_position("ETHUSDT_UMCBL")    # 12.40 USDT Gewinn sichern
execute_summary_only_fixed()             # Fixed summary function
daily_market_check_fixed()               # Fixed daily check
quick_market_check()                     # Quick market overview
full_daily_check()                       # Complete daily routine
prices_only()
get_current_positions(debug = TRUE)
#headmaps system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fixed_algo_heatmap.r")
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/heatmap_explanation.r")
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/ggplot2_heatmap_viz.r")
#explain_all()                 # Komplette Score-Erklärung
algo_oi_dashboard()          # ALGO Dashboard
# Heatmap-Daten erstellen (braucht fixed_algo_heatmap.r)
heatmap_result <- algo_heatmap()
# Visualisierung erstellen (braucht ggplot2_heatmap_viz.r)
plots <- visualize_my_heatmap(heatmap_result)
print(plots$interactive)
#---- ADA -----head map
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/ADA_heatmap.r")
ADA_oi_dashboard()
#---- ETC -------head map
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/etc_heatmap.r")
ETC_oi_dashboard()
# ---- clear_workspace.R ----
clear_workspace <- function(keep = character()) {
## Alle Objekte in .GlobalEnv holen (inkl. versteckte wie .Random.seed):
alles <- ls(envir = .GlobalEnv, all.names = TRUE)
## Gewünschte Objekte davon ausnehmen:
to_remove <- setdiff(alles, keep)
## Löschen:
rm(list = to_remove, envir = .GlobalEnv)
## Speicher freigeben (optional):
invisible(gc())
}
# Alles löschen
clear_workspace()
# Alles löschen, außer „model“ und „config“
#clear_workspace(keep = c("model", "config"))
# hub System neu laden
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/trading_execution_hub_v2_with_console_mgmt.r")
#summary function
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/improved_summary_functions.r")
# 5coins
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fix_coin_names_api.r")
#order management
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/advanced_order_management.r")
#bitget_api
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/bitget_api_fixes.r")
#complete_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/complete_system_fix.r")
#summary_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fixed_summary_system.r")
#summary_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/multi_asset_fix_complete.r")
# Source the base module first
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/onchain_metrics_enhanced.r")
force_portfolio_update()
# Alle Positionen schützen
protect_position("ETCUSDT_UMCBL")    # 41 USDT Gewinn sichern
protect_position("ALGOUSDT_UMCBL")   # 5.96 USDT Gewinn sichern
protect_position("ADAUSDT_UMCBL")    # 6.16 USDT Gewinn sichern
protect_position("VETUSDT_UMCBL")    # 5.48 USDT Gewinn sichern
protect_position("ICPUSDT_UMCBL")    # 12.40 USDT Gewinn sichern
protect_position("BTCUSDT_UMCBL")    # 12.40 USDT Gewinn sichern
protect_position("ETHUSDT_UMCBL")    # 12.40 USDT Gewinn sichern
execute_summary_only_fixed()             # Fixed summary function
daily_market_check_fixed()               # Fixed daily check
quick_market_check()                     # Quick market overview
full_daily_check()                       # Complete daily routine
prices_only()
get_current_positions(debug = TRUE)
#headmaps system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fixed_algo_heatmap.r")
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/heatmap_explanation.r")
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/ggplot2_heatmap_viz.r")
#explain_all()                 # Komplette Score-Erklärung
algo_oi_dashboard()          # ALGO Dashboard
#---- ADA -----head map
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/ADA_heatmap.r")
ADA_oi_dashboard()
ETC_oi_dashboard()
#---- ETC -------head map
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/etc_heatmap.r")
ETC_oi_dashboard()
# ---- clear_workspace.R ----
clear_workspace <- function(keep = character()) {
## Alle Objekte in .GlobalEnv holen (inkl. versteckte wie .Random.seed):
alles <- ls(envir = .GlobalEnv, all.names = TRUE)
## Gewünschte Objekte davon ausnehmen:
to_remove <- setdiff(alles, keep)
## Löschen:
rm(list = to_remove, envir = .GlobalEnv)
## Speicher freigeben (optional):
invisible(gc())
}
# Alles löschen
clear_workspace()
# Alles löschen, außer „model“ und „config“
#clear_workspace(keep = c("model", "config"))
# 1. Navigieren Sie zum core Verzeichnis
setwd("C:/freeding/tbot202506/r_analysis/riskassetm/core")
# 2. Laden Sie das Hauptmodul
source("main.r")
# Option A: Vollständiges interaktives System
run_trading_system()
10
10
2
3
# hub System neu laden
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/trading_execution_hub_v2_with_console_mgmt.r")
#summary function
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/improved_summary_functions.r")
# 5coins
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fix_coin_names_api.r")
#order management
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/advanced_order_management.r")
#bitget_api
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/bitget_api_fixes.r")
#complete_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/complete_system_fix.r")
#summary_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fixed_summary_system.r")
#summary_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/multi_asset_fix_complete.r")
# Source the base module first
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/onchain_metrics_enhanced.r")
force_portfolio_update()
#---- ETC -------head map
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/etc_heatmap.r")
ETC_oi_dashboard()
#---- ADA -----head map
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/ADA_heatmap.r")
ADA_oi_dashboard()
ADA_oi_dashboard()
#---- ADA -----head map
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/ADA_heatmap.r")
ADA_oi_dashboard()
# ---- clear_workspace.R ----
clear_workspace <- function(keep = character()) {
## Alle Objekte in .GlobalEnv holen (inkl. versteckte wie .Random.seed):
alles <- ls(envir = .GlobalEnv, all.names = TRUE)
## Gewünschte Objekte davon ausnehmen:
to_remove <- setdiff(alles, keep)
## Löschen:
rm(list = to_remove, envir = .GlobalEnv)
## Speicher freigeben (optional):
invisible(gc())
}
# Alles löschen
clear_workspace()
# Alles löschen, außer „model“ und „config“
#clear_workspace(keep = c("model", "config"))
#---- ETC -------head map
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/etc_heatmap.r")
ETC_oi_dashboard()
# hub System neu laden
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/trading_execution_hub_v2_with_console_mgmt.r")
#summary function
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/improved_summary_functions.r")
# 5coins
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fix_coin_names_api.r")
#order management
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/advanced_order_management.r")
#bitget_api
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/bitget_api_fixes.r")
#complete_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/complete_system_fix.r")
#summary_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/fixed_summary_system.r")
#summary_system
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/multi_asset_fix_complete.r")
# Source the base module first
source("C:/freeding/tbot202506/r_analysis/strategies/Bitget/onchain_metrics_enhanced.r")
force_portfolio_update()
